(ns factorization-for-recsys.sample-code
  (:require [hoplon.reveal :refer [highlight latex]]))

(defn example-gradient []
  (highlight
   ;;{{
   (defn gradient-update [P Q E alpha beta]
     (+ P (* alpha (- (mmul 2 E Q)
                      (* beta P)))))
   ;;}}
   ))

(defn example-rse []
  (highlight
   ;;{{
   (defn squared-error [R Rn P Q beta]
     (+ (esum (** (- R Rn) 2))
        (* (/ beta 2)
           (+ (esum (** P 2))
              (esum (** Q 2))))))
   ;;}}
   ))

(defn example-mf []
  (highlight
   ;;{{
   (defn matrix-factorization [R P Q & {steps :steps alpha :alpha beta :beta
                                        :as opts
                                        :or {steps 5000 alpha 0.0002 beta 0.02}}]
     (loop [P P Q Q step 0]
       (let [E (- R (dot P (transpose Q)))
             Pn (gradient-update P Q E alpha beta)
             Qn (gradient-update Q P (transpose E) alpha beta)
             Rn (dot Pn (transpose Qn))
             error (squared-error R Rn Pn Qn beta)]
         (if (or (< error 0.001)
                 (> step steps))
           [Pn Qn]
           (recur Pn Qn (inc step))))))
   ;;}}
   ))

(defn example-rand-matrix []
  (highlight
   ;;{{
   (defn rand-matrix [n m]
     (->> (zero-matrix n m)
          (emap (fn [_] (rand)))))
   ;;}}
   ))

(defn example-setup []
  (highlight
   ;;{{
   (def k 2)
   (def R (matrix [[5,3,0,1]
                   [4,0,0,1]
                   [1,1,0,5]
                   [1,0,0,4]
                   [0,1,5,4]]))
   (def N (nth (shape R) 0))
   (def M (nth (shape R) 1))
   (def P (rand-matrix N k))
   (def Q (rand-matrix M k))
   ;;}}
   ))

(defn example-prediction []
  (highlight
   ;;{{
   (let [[Pn Qn] (matrix-factorization R P Q)]
     (dot Pn (transpose Qn)))
   => [[5.124  1.903 -0.724  1.563]
       [3.426  1.279 -0.457  1.091]
       [1.551  1.045  1.785  3.961]
       [1.178  0.804  1.399  3.083]
       [0.449  0.543  3.100  5.146]]
   ;;}}
   ))
